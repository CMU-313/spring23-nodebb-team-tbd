# -*- coding: utf-8 -*-
"""Evaluation Report

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yV9eow-2MkisAfUbZPURYPGnPO7H1Bot
"""

!pip uninstall scikit-learn -y
!pip install scikit-learn==1.2.1

import pandas as pd
import joblib
from pydantic import BaseModel, Field
from pydantic.tools import parse_obj_as
import matplotlib.pyplot as plt 
from tqdm import tqdm
import numpy as np

!curl -L -o student_data.csv "https://seansun.org/17313/P4/ML/student_data.csv"
!curl -L -o model.pkl "https://seansun.org/17313/P4/ML/model.pkl"

# Pydantic Models
class Student(BaseModel):
    student_id: str = Field(alias="Student ID")
    gender: str = Field(alias="Gender")
    age: str = Field(alias="Age")
    major: str = Field(alias="Major")
    gpa: str = Field(alias="GPA")
    extra_curricular: str = Field(alias="Extra Curricular")
    num_programming_languages: str = Field(alias="Num Programming Languages")
    num_past_internships: str = Field(alias="Num Past Internships")

    class Config:
        allow_population_by_field_name = True

class PredictionResult(BaseModel):
    good_employee: int

# Main Functionality
def predict(student):
    '''
    Returns a prediction on whether the student will be a good employee
    based on given parameters by using the ML model

    Parameters
    ----------
    student : dict
        A dictionary that contains all fields in Student
    
    Returns
    -------
    dict
        A dictionary satisfying type PredictionResult, contains a single field
        'good_employee' which is either 1 (will be a good employee) or 0 (will
        not be a good employee)
    '''
    # Use Pydantic to validate model fields exist
    student = parse_obj_as(Student, student)

    clf = joblib.load('./model.pkl')
    
    student = student.dict(by_alias=True)
    query = pd.DataFrame(student, index=[0])
    prediction = clf.predict(query) # TODO: Error handling ??

    return { 'good_employee': prediction[0] }

df = pd.read_csv("./student_data.csv")

dfdict = df.to_dict(orient='records')
for student in tqdm(dfdict):
    student["result"] = predict(student)['good_employee']

acc = 0
acc_count = 0
C = np.zeros((2, 2))
for student in dfdict:
    if student['Good Candidate'] == student['result']:
        acc += 1
    C[student['Good Candidate']][student['result']] += 1
    acc_count += 1
print("Accuracy: ", acc/acc_count)
print("Confusion matrix:")
print(C)

df['Gender'].value_counts().plot(kind='bar')

df['Age'].plot(kind='hist', edgecolor='black')

df['Major'].value_counts().plot(kind='bar')

df['GPA'].plot(kind='hist', edgecolor='black')

df['Extra Curricular'].value_counts().plot(kind='bar')

df['Num Programming Languages'].plot(kind='hist', edgecolor='black')

df['Num Past Internships'].plot(kind='hist', edgecolor='black')

