let esprima = require('esprima')
let result = esprima.parseScript("\'use strict\';\r\n\r\n\/\/ eslint-disable-next-line no-redeclare\r\nconst io = require(\'socket.io-client\');\r\n\/\/ eslint-disable-next-line no-redeclare\r\nconst $ = require(\'jquery\');\r\n\r\napp = window.app || {};\r\n\r\n(function () {\r\n    let reconnecting = false;\r\n\r\n    const ioParams = {\r\n        reconnectionAttempts: config.maxReconnectionAttempts,\r\n        reconnectionDelay: config.reconnectionDelay,\r\n        transports: config.socketioTransports,\r\n        path: config.relative_path + \'\/socket.io\',\r\n    };\r\n\r\n    window.socket = io(config.websocketAddress, ioParams);\r\n\r\n    const oEmit = socket.emit;\r\n    socket.emit = function (event, data, callback) {\r\n        if (typeof data === \'function\') {\r\n            callback = data;\r\n            data = null;\r\n        }\r\n        if (typeof callback === \'function\') {\r\n            oEmit.apply(socket, [event, data, callback]);\r\n            return;\r\n        }\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            oEmit.apply(socket, [event, data, function (err, result) {\r\n                if (err) reject(err);\r\n                else resolve(result);\r\n            }]);\r\n        });\r\n    };\r\n\r\n    let hooks;\r\n    require([\'hooks\'], function (_hooks) {\r\n        hooks = _hooks;\r\n        if (parseInt(app.user.uid, 10) >= 0) {\r\n            addHandlers();\r\n        }\r\n    });\r\n\r\n    window.app.reconnect = () => {\r\n        if (socket.connected) {\r\n            return;\r\n        }\r\n\r\n        const reconnectEl = $(\'#reconnect\');\r\n        $(\'#reconnect-alert\')\r\n            .removeClass(\'alert-danger pointer\')\r\n            .addClass(\'alert-warning\')\r\n            .find(\'p\')\r\n            .translateText(`[[global:reconnecting-message, ${config.siteTitle}]]`);\r\n\r\n        reconnectEl.html(\'<i class=\"fa fa-spinner fa-spin\"><\/i>\');\r\n        socket.connect();\r\n    };\r\n\r\n    function addHandlers() {\r\n        socket.on(\'connect\', onConnect);\r\n\r\n        socket.on(\'disconnect\', onDisconnect);\r\n\r\n        socket.io.on(\'reconnect_failed\', function () {\r\n            const reconnectEl = $(\'#reconnect\');\r\n            reconnectEl.html(\'<i class=\"fa fa-plug text-danger\"><\/i>\');\r\n\r\n            $(\'#reconnect-alert\')\r\n                .removeClass(\'alert-warning\')\r\n                .addClass(\'alert-danger pointer\')\r\n                .find(\'p\')\r\n                .translateText(\'[[error:socket-reconnect-failed]]\')\r\n                .one(\'click\', app.reconnect);\r\n\r\n            $(window).one(\'focus\', app.reconnect);\r\n        });\r\n\r\n        socket.on(\'checkSession\', function (uid) {\r\n            if (parseInt(uid, 10) !== parseInt(app.user.uid, 10)) {\r\n                handleSessionMismatch();\r\n            }\r\n        });\r\n        socket.on(\'event:invalid_session\', () => {\r\n            handleInvalidSession();\r\n        });\r\n\r\n        socket.on(\'setHostname\', function (hostname) {\r\n            app.upstreamHost = hostname;\r\n        });\r\n\r\n        socket.on(\'event:banned\', onEventBanned);\r\n        socket.on(\'event:unbanned\', onEventUnbanned);\r\n        socket.on(\'event:logout\', function () {\r\n            require([\'logout\'], function (logout) {\r\n                logout();\r\n            });\r\n        });\r\n        socket.on(\'event:alert\', function (params) {\r\n            require([\'alerts\'], function (alerts) {\r\n                alerts.alert(params);\r\n            });\r\n        });\r\n        socket.on(\'event:deprecated_call\', function (data) {\r\n            console.warn(\'[socket.io] \', data.eventName, \'is now deprecated in favour of\', data.replacement);\r\n        });\r\n\r\n        socket.removeAllListeners(\'event:nodebb.ready\');\r\n        socket.on(\'event:nodebb.ready\', function (data) {\r\n            if ((data.hostname === app.upstreamHost) && (!app.cacheBuster || app.cacheBuster !== data[\'cache-buster\'])) {\r\n                app.cacheBuster = data[\'cache-buster\'];\r\n                require([\'alerts\'], function (alerts) {\r\n                    alerts.alert({\r\n                        alert_id: \'forum_updated\',\r\n                        title: \'[[global:updated.title]]\',\r\n                        message: \'[[global:updated.message]]\',\r\n                        clickfn: function () {\r\n                            window.location.reload();\r\n                        },\r\n                        type: \'warning\',\r\n                    });\r\n                });\r\n            }\r\n        });\r\n        socket.on(\'event:livereload\', function () {\r\n            if (app.user.isAdmin && !ajaxify.currentPage.match(\/admin\/)) {\r\n                window.location.reload();\r\n            }\r\n        });\r\n    }\r\n\r\n    function handleInvalidSession() {\r\n        socket.disconnect();\r\n        require([\'messages\', \'logout\'], function (messages, logout) {\r\n            logout(false);\r\n            messages.showInvalidSession();\r\n        });\r\n    }\r\n\r\n    function handleSessionMismatch() {\r\n        if (app.flags._login || app.flags._logout) {\r\n            return;\r\n        }\r\n\r\n        socket.disconnect();\r\n        require([\'messages\'], function (messages) {\r\n            messages.showSessionMismatch();\r\n        });\r\n    }\r\n\r\n    function onConnect() {\r\n        if (!reconnecting) {\r\n            hooks.fire(\'action:connected\');\r\n        }\r\n\r\n        if (reconnecting) {\r\n            const reconnectEl = $(\'#reconnect\');\r\n            const reconnectAlert = $(\'#reconnect-alert\');\r\n\r\n            reconnectEl.tooltip(\'destroy\');\r\n            reconnectEl.html(\'<i class=\"fa fa-check text-success\"><\/i>\');\r\n            reconnectAlert.addClass(\'hide\');\r\n            reconnecting = false;\r\n\r\n            reJoinCurrentRoom();\r\n\r\n            socket.emit(\'meta.reconnected\');\r\n\r\n            hooks.fire(\'action:reconnected\');\r\n\r\n            setTimeout(function () {\r\n                reconnectEl.removeClass(\'active\').addClass(\'hide\');\r\n            }, 3000);\r\n        }\r\n    }\r\n\r\n    function reJoinCurrentRoom() {\r\n        if (app.currentRoom) {\r\n            const current = app.currentRoom;\r\n            app.currentRoom = \'\';\r\n            app.enterRoom(current);\r\n        }\r\n    }\r\n\r\n    function onReconnecting() {\r\n        reconnecting = true;\r\n        const reconnectEl = $(\'#reconnect\');\r\n        const reconnectAlert = $(\'#reconnect-alert\');\r\n\r\n        if (!reconnectEl.hasClass(\'active\')) {\r\n            reconnectEl.html(\'<i class=\"fa fa-spinner fa-spin\"><\/i>\');\r\n            reconnectAlert.removeClass(\'hide\');\r\n        }\r\n\r\n        reconnectEl.addClass(\'active\').removeClass(\'hide\').tooltip({\r\n            placement: \'bottom\',\r\n        });\r\n    }\r\n\r\n    function onDisconnect() {\r\n        setTimeout(function () {\r\n            if (socket.disconnected) {\r\n                onReconnecting();\r\n            }\r\n        }, 2000);\r\n\r\n        hooks.fire(\'action:disconnected\');\r\n    }\r\n\r\n    function onEventBanned(data) {\r\n        require([\'bootbox\', \'translator\'], function (bootbox, translator) {\r\n            const message = data.until ?\r\n                translator.compile(\'error:user-banned-reason-until\', (new Date(data.until).toLocaleString()), data.reason) :\r\n                \'[[error:user-banned-reason, \' + data.reason + \']]\';\r\n            translator.translate(message, function (message) {\r\n                bootbox.alert({\r\n                    title: \'[[error:user-banned]]\',\r\n                    message: message,\r\n                    closeButton: false,\r\n                    callback: function () {\r\n                        window.location.href = config.relative_path + \'\/\';\r\n                    },\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    function onEventUnbanned() {\r\n        require([\'bootbox\'], function (bootbox) {\r\n            bootbox.alert({\r\n                title: \'[[global:alert.unbanned]]\',\r\n                message: \'[[global:alert.unbanned.message]]\',\r\n                closeButton: false,\r\n                callback: function () {\r\n                    window.location.href = config.relative_path + \'\/\';\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    if (\r\n        config.socketioOrigins &&\r\n        config.socketioOrigins !== \'*:*\' &&\r\n        config.socketioOrigins.indexOf(location.hostname) === -1\r\n    ) {\r\n        console.error(\r\n            \'You are accessing the forum from an unknown origin. This will likely result in websockets failing to connect. \\n\' +\r\n            \'To fix this, set the `\"url\"` value in `config.json` to the URL at which you access the site. \\n\' +\r\n            \'For more information, see this FAQ topic: https:\/\/community.nodebb.org\/topic\/13388\'\r\n        );\r\n    }\r\n}());\r\n");
console.log(JSON.stringify(result));